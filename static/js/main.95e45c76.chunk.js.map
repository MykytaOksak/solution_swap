{"version":3,"sources":["components/Header/Header.module.css","components/Header/Header.jsx","components/CreatePost/CreatePost.jsx","components/PostCard/PostCard.jsx","components/shared/tasks.js","components/AllTasks/AllTasks.jsx","components/PB/PB.jsx","components/MathStat/MathStat.jsx","components/MathLog/MathLog.jsx","components/Home/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","console","log","Jumbotron","className","HeaderStyle","jumbotron","Navbar","collapseOnSelect","expand","variant","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","eventKey","nav","CreatePost","Form","Group","Control","rows","placeholder","Button","RenderTask","title","description","type","Card","bg","style","width","Img","src","fluid","Body","Title","Text","Footer","PostCard","cardsArray","task","map","TASKS","AllTasks","PB","PBTasks","filter","MathStat","MathStatTasks","MathLog","MathLogTasks","Home","App","Container","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.95e45c76.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"Header_jumbotron__2Xo46\",\"nav\":\"Header_nav__3BHXx\"};","import React from 'react'\r\nimport {Navbar, Jumbotron, Nav} from 'react-bootstrap'\r\nimport HeaderStyle from './Header.module.css'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst Header = props => {\r\n    console.log(props)\r\n    return (\r\n        <Jumbotron className={HeaderStyle.jumbotron}>\r\n            <Navbar collapseOnSelect expand=\"sm\" variant=\"dark\">\r\n                <Navbar.Brand as={Link} to=\"/\"><h3>Solutions Swap</h3></Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav>\r\n                        <Nav.Link eventKey={1} as={Link} className={HeaderStyle.nav} to=\"/AllTasks\">All tasks</Nav.Link>\r\n                        <Nav.Link eventKey={2} as={Link} className={HeaderStyle.nav} to=\"/PB\">PB</Nav.Link>\r\n                        <Nav.Link eventKey={3} as={Link} className={HeaderStyle.nav} to=\"/MathStat\">Math stat</Nav.Link>\r\n                        <Nav.Link eventKey={4} as={Link} className={HeaderStyle.nav} to=\"/MathLog\">Math log</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport {Button, Form} from 'react-bootstrap'\r\n\r\nconst CreatePost = () => {\r\n    return (\r\n        <Form>\r\n            <Form.Group>\r\n                <Form.Control as=\"textarea\" rows=\"3\" placeholder=\"Write about your problem...\"/>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n\r\n                <Button variant=\"dark\">Post</Button>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CreatePost","import React from 'react'\r\nimport {Card} from 'react-bootstrap'\r\nimport PostCardStyle from './PostCardStyle.module.css'\r\n\r\nconst RenderTask = ({title, description, type}) => {\r\n    return (\r\n        <Card bg='light' style={{width: '100%'}} className='mb-5'>\r\n            <Card.Img variant=\"left\" src=\"holder.js/100px200\" fluid/>\r\n            <Card.Body>\r\n                <Card.Title>{title}</Card.Title>\r\n                <Card.Text>{description}</Card.Text>\r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <small className=\"text-muted\">Type: {type}</small>\r\n            </Card.Footer>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nconst PostCard = (props) => {\r\n    const cardsArray = props.task.map(task => (\r\n        <RenderTask\r\n            title={task.title}\r\n            description={task.description}\r\n            type={task.type}\r\n            id={task.id}/>\r\n    ))\r\n\r\n    return (\r\n        <div>\r\n            {cardsArray}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default PostCard","export const TASKS = [\r\n    {\r\n        id: 1,\r\n        type: 'PB',\r\n        title: 'activeClassName attribute refuses to work',\r\n        description: 'The attribute has no impact on how the NavLink looks'\r\n    },\r\n    {\r\n        id: 2,\r\n        type: 'MathStat',\r\n        title: 'Calculation of ...',\r\n        description: 'Help me to calculate the probability of ...'\r\n    },\r\n    {\r\n        id: 3,\r\n        type: 'MathLog',\r\n        title: 'Mathematical judgments',\r\n        description: 'Help to proof my mathematical judgments ...'\r\n    }\r\n]\r\n\r\nexport default {\r\n    TASKS\r\n}","import React from 'react'\r\nimport CreatePost from './../CreatePost/CreatePost'\r\nimport PostCard from '../PostCard/PostCard'\r\nimport { TASKS } from './../shared/tasks'\r\n\r\nconst AllTasks = () => {\r\n    return (\r\n        <div>\r\n            <CreatePost/>\r\n            <PostCard task={TASKS}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllTasks","import React from 'react'\r\nimport CreatePost from './../CreatePost/CreatePost'\r\nimport PostCard from '../PostCard/PostCard'\r\nimport {TASKS} from './../shared/tasks'\r\n\r\nconst PB = () => {\r\n    let PBTasks = TASKS.filter(task => task.type === 'PB')\r\n\r\n    return (\r\n        <div>\r\n            <CreatePost/>\r\n            <PostCard task={PBTasks}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PB","import React from 'react'\r\nimport CreatePost from './../CreatePost/CreatePost'\r\nimport PostCard from '../PostCard/PostCard'\r\nimport {TASKS} from './../shared/tasks'\r\n\r\nconst MathStat = () => {\r\n    let MathStatTasks = TASKS.filter(task => task.type === 'MathStat')\r\n\r\n    return (\r\n        <div>\r\n            <CreatePost/>\r\n            <PostCard task={MathStatTasks}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MathStat","import React from 'react'\r\nimport CreatePost from './../CreatePost/CreatePost'\r\nimport PostCard from '../PostCard/PostCard'\r\nimport {TASKS} from './../shared/tasks'\r\n\r\nconst MathLog = () => {\r\n    let MathLogTasks = TASKS.filter(task => task.type === 'MathLog')\r\n\r\n    return (\r\n        <div>\r\n            <CreatePost/>\r\n            <PostCard task={MathLogTasks}/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MathLog","import React from 'react'\r\nimport CreatePost from './../CreatePost/CreatePost'\r\nimport PostCard from '../PostCard/PostCard'\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h4>Welcome on a truly communist's website!</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\nimport './App.css'\nimport {Container} from 'react-bootstrap'\nimport Header from './components/Header/Header'\nimport AllTasks from './components/AllTasks/AllTasks'\nimport PB from './components/PB/PB';\nimport {Redirect, BrowserRouter, Route} from 'react-router-dom';\nimport MathStat from './components/MathStat/MathStat';\nimport MathLog from './components/MathLog/MathLog';\nimport Home from './components/Home/Home';\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <Header/>\n            <Container className='col-11 col-md-6 mt-3'>\n                <Route path='/' exact component={Home}/>\n                <Route path='/AllTasks' component={AllTasks}/>\n                <Route path='/PB' component={PB}/>\n                <Route path='/MathStat' component={MathStat}/>\n                <Route path='/MathLog' component={MathLog}/>\n                <Redirect path='/'/>\n            </Container>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'holderjs/holder'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}